Heap size: 2147483648
Refal-5 Source Beautifier
    source-file : ../../tests/real_tasks/rsb/rsb.in
----------------/
$ENTRY GO {    = <PROUT 'Refal-5 Source Beautifier'>      <PROUT '    source-file ' <ARG 1>>      <PROUT '    dest-file   ' <ARG 2>>      <PROUT '    flag        ' <ARG 3>>      <PROUT '----------------/'>      <OPEN 'r' 1 <ARG 1>>      <SAVEFILE 2          '/*'           CAR_RET          ' * This program was produced by decompiler from assembler source.'          CAR_RET          ' * (C) 2000 Serge Skorobogatoff'          CAR_RET          ' */'          CAR_RET CAR_RET          <RSB_LAYOUT               <RSB_GEN                   <RSB_PARSE <ARG 3>                      <RSB_STRUC <RSB_LEX <LOADFILE 1>>>                  >              >          >          <OPEN 'w' 2 <ARG 2>>      >;    };LOADFILE {    s1 = <LOADFILE2 s1 <GET s1>>;    };LOADFILE2 {    s1 0 = ;    s1 e2 0 = e2;    s1 e2 = e2 CAR_RET <LOADFILE s1>;    };SAVEFILE {    s1 = ;    s1 e2 CAR_RET e3 = <PUT s1 e2> <SAVEFILE s1 e3>;    s1 e2 = <PUT s1 e2>;    };RSB_LEX {    e1 = <PROUT 'Lexical analysis in progress ...'>         <UNITE_STRINGS <BREAK <REMOVE_COMMENTS e1>>>         <PROUT '    done (current step is ' <STEP> ').'>;    };REMOVE_COMMENTS {    e1 = <REMOVE_COMMENTS2 CAR_RET e1 CAR_RET>;    };REMOVE_COMMENTS2 {    CAR_RET '*' e1 CAR_RET e2 = <REMOVE_COMMENTS2 CAR_RET e2>;    '/*' e1 '*/' e2 = <REMOVE_COMMENTS2 e2>;    "'" e1 "'" e2 = "'" e1 "'" <REMOVE_COMMENTS2 e2>;    '"' e1 '"' e2 = '"' e1 '"' <REMOVE_COMMENTS2 e2>;    CAR_RET e1 = <REMOVE_COMMENTS2 e1>;    '	' e1 = <REMOVE_COMMENTS2 ' ' e1>;    s1 e2 = s1 <REMOVE_COMMENTS2 e2>;    = ;    };BREAK {    = ;    '"' e1 = <BREAK3 <PICK_OUT_STRING '"' e1>>;    "'" e1 = <BREAK3 <PICK_OUT_STRING "'" e1>>;    ' ' e1 = <BREAK e1>;        e1 "'" e2 = <BREAK4 (e1) (e2)>;    e1 '"' e2 = <BREAK5 (e1) (e2)>;    e1 ' ' e2 = <BREAK2 e1> <BREAK e2>;    e1 = <BREAK2 e1>;    };BREAK4 {    (e1 '"' e3) (e2) = <BREAK e1> <BREAK '"' e3 "'" e2>;    (e1) (e2) = <BREAK e1> <BREAK "'" e2>;    };BREAK5 {    (e1 "'" e3) (e2) = <BREAK e1> <BREAK "'" e3 '"' e2>;    (e1) (e2) = <BREAK e1> <BREAK '"' e2>;    };BREAK3 {    (e2) e3 = (e2) <BREAK e3>;    };BREAK2 {    = ;    e1 '(' e2 = <BREAK2 e1> '(' <BREAK2 e2>;    e1 ')' e2 = <BREAK2 e1> ')' <BREAK2 e2>;    e1 '<' e2 = <BREAK2 e1> '<' <BREAK2 e2>;    e1 '>' e2 = <BREAK2 e1> '>' <BREAK2 e2>;    e1 '=' e2 = <BREAK2 e1> '=' <BREAK2 e2>;    e1 ';' e2 = <BREAK2 e1> ';' <BREAK2 e2>;    e1 ':' e2 = <BREAK2 e1> ':' <BREAK2 e2>;    e1 ',' e2 = <BREAK2 e1> ',' <BREAK2 e2>;    e1 '{' e2 = <BREAK2 e1> '{' <BREAK2 e2>;    e1 '}' e2 = <BREAK2 e1> '}' <BREAK2 e2>;    e1 '+' e2 = <BREAK2 e1> (ID_IDENT 'ADD') <BREAK2 e2>;        e1 '*' e2 = <BREAK2 e1> (ID_IDENT 'MUL') <BREAK2 e2>;    e1 '/' e2 = <BREAK2 e1> (ID_IDENT 'DIV') <BREAK2 e2>;    '$ENTRY' = ID_ENTRY;    '$EXTERNAL' = ID_EXTERNAL;    '$EXTERN' = ID_EXTERNAL;    '$EXTRN' = ID_EXTERNAL;    's' e2 = (ID_VAR 's' <ADD_POINT e2>);    't' e2 = (ID_VAR 't' <ADD_POINT e2>);    'e' e2 = (ID_VAR 'e' <ADD_POINT e2>);    '0' e2 = (ID_NUMBER '0' e2);    '1' e2 = (ID_NUMBER '1' e2);    '2' e2 = (ID_NUMBER '2' e2);    '3' e2 = (ID_NUMBER '3' e2);    '4' e2 = (ID_NUMBER '4' e2);    '5' e2 = (ID_NUMBER '5' e2);    '6' e2 = (ID_NUMBER '6' e2);    '7' e2 = (ID_NUMBER '7' e2);    '8' e2 = (ID_NUMBER '8' e2);    '9' e2 = (ID_NUMBER '9' e2);    e1 = (ID_IDENT e1);    };PICK_OUT_STRING {    s.Quot s.Quot e1 = (ID_STRING s.Quot) e1;    s.Quot e1 = <PICK_OUT_STRING (ID_STRING) s.Quot e1>;    (e1) s.Quot s.Quot s.Quot e2 = <PICK_OUT_STRING (e1 s.Quot) s.Quot e2>;    (e1) s.Quot s.Quot e2 = (e1) e2;    (e1) s.Quot s2 e3 = <PICK_OUT_STRING (e1 s2) s.Quot e3>;    };ADD_POINT {    '.' e1 = '.' e1;    e1 = '.' e1;    };UNITE_STRINGS {    e1 = e1;    };RSB_STRUC {    e1 = <PROUT 'Bracket detection in progress ...'>         <RSB_STRUC2 e1>         <PROUT '    done (current step is ' <STEP> ').'>;    };RSB_STRUC2 {    e1 '{' e2 = e1 <RSB_STRUC3 <SEARCH '}' ('{') (e2)>>;    e1 = e1;    };RSB_STRUC3 {    (e1) () = (e1);    (e1) (e2) = (e1) <RSB_STRUC2 e2>;    };SEARCH {    s.What (e1) (s.What e2) = (e1 s.What) (e2);    s.What (e1) ('{' e3) = <SEARCH2 s.What (e1) <SEARCH '}' ('{') (e3)>>;    s.What (e1) ('(' e3) = <SEARCH2 s.What (e1) <SEARCH ')' ('(') (e3)>>;    s.What (e1) ('<' e3) = <SEARCH2 s.What (e1) <SEARCH '>' ('<') (e3)>>;    s.What (e1) (t2 e3) = <SEARCH s.What (e1 t2) (e3)>;    };SEARCH2 {    s.What (e1) (e4) (e5) = <SEARCH s.What (e1 (e4)) (e5)>;    };RSB_PARSE {    e1 =          <PROUT 'Syntactic analysis in progress ...'>         <PARSE_PROGRAM e1>         <PROUT '    done (current step is ' <STEP> ').'>;    };PARSE_PROGRAM {    e1 = <PARSE_PROGRAM2 <PARSE_FUNCTION_DEF e1>>;    };PARSE_PROGRAM2 {    = ;    (e1) ('T') = (e1);    (e1) ('F') = (e1);    (e1) (e2) = (e1) <PARSE_PROGRAM e2>;    };PARSE_FUNCTION_DEF {    s.RenumFlag = ;    s.RenumFlag ID_EXTERNAL e1 ';' e2 =         (SY_FUNCTION_DEF 3 <PARSE_IDENT_CLIST e1>) (s.RenumFlag e2);        s.RenumFlag (ID_IDENT 'LASM1') ('{' e2 '}') ';' e3 =        (SY_FUNCTION_DEF 2 (<UPPER <ARG 4>>) <PARSE_FUNCTION_DEF2 s.RenumFlag e2>)         (s.RenumFlag e3);    s.RenumFlag (ID_IDENT 'LASM1') ('{' e2 '}') e3 =        (SY_FUNCTION_DEF 2 (<UPPER <ARG 4>>) <PARSE_FUNCTION_DEF2 s.RenumFlag e2>)         (s.RenumFlag e3);    s.RenumFlag (ID_IDENT e1) ('{' e2 '}') ';' e3 =        (SY_FUNCTION_DEF 1 (e1) <PARSE_FUNCTION_DEF2 s.RenumFlag e2>)         (s.RenumFlag e3);    s.RenumFlag (ID_IDENT e1) ('{' e2 '}') e3 =        (SY_FUNCTION_DEF 1 (e1) <PARSE_FUNCTION_DEF2 s.RenumFlag e2>)         (s.RenumFlag e3);    s.RenumFlag ID_ENTRY (ID_IDENT e1) ('{' e2 '}') ';' e3 =        (SY_FUNCTION_DEF 2 (e1) <PARSE_FUNCTION_DEF2 s.RenumFlag e2>)         (s.RenumFlag e3);    s.RenumFlag ID_ENTRY (ID_IDENT e1) ('{' e2 '}') e3 =        (SY_FUNCTION_DEF 2 (e1) <PARSE_FUNCTION_DEF2 s.RenumFlag e2>)         (s.RenumFlag e3);    };PARSE_FUNCTION_DEF2 {    'T' e1 = <RENUM_SENTENCE_LIST (1) <PARSE_SENTENCE_LIST e1>>;    'F' e1 = <PARSE_SENTENCE_LIST e1>;    };PARSE_IDENT_CLIST {    (ID_IDENT e1) ',' e2 = (e1) <PARSE_IDENT_CLIST e2>;    (ID_IDENT e1) = (e1);    };PARSE_SENTENCE_LIST {    e1 ';;' t2 e3 = <PARSE_SENTENCE e1> <PARSE_SENTENCE_LIST t2 e3>;    e1 ';' t2 e3 = <PARSE_SENTENCE e1> <PARSE_SENTENCE_LIST t2 e3>;    e1 ';' = <PARSE_SENTENCE e1>;    e1 = <PARSE_SENTENCE e1>;    };PARSE_SENTENCE {    e1 ',' e2 = (SY_SENTENCE 1 <PARSE_PATTERN e1> <PARSE_COND e2>);    e1 '=' e2 = (SY_SENTENCE 2 <PARSE_PATTERN e1> <PARSE_EXPRESSION e2>);    };PARSE_COND {    e1 ',' e2 = (SY_COND 1 <PARSE_CONDITION e1> <PARSE_COND e2>);    e1 '=' e2 = (SY_COND 2 <PARSE_CONDITION e1> <PARSE_EXPRESSION e2>);    e1 ':' ('{' e2 '}') =         (SY_COND 3 <PARSE_EXPRESSION e1> <PARSE_SENTENCE_LIST e2>);    ('{' e1 '}') = (SY_COND 4 <PARSE_COND_COND_REPLACEMENT_LIST e1>);    };PARSE_CONDITION {    e1 ':' e2 = (SY_CONDITION <PARSE_EXPRESSION e1> <PARSE_PATTERN e2>);    };PARSE_COND_COND_REPLACEMENT_LIST {    e1 ';;' t2 e3 =         <PARSE_COND_COND_REPLACEMENT e1> <PARSE_COND_COND_REPLACEMENT_LIST t2 e3>;    e1 ';' t2 e3 =         <PARSE_COND_COND_REPLACEMENT e1> <PARSE_COND_COND_REPLACEMENT_LIST t2 e3>;    e1 ';' = <PARSE_COND_COND_REPLACEMENT e1>;    e1 = <PARSE_COND_COND_REPLACEMENT e1>;    };PARSE_COND_COND_REPLACEMENT {    e1 ',' e2 =         (SY_COND_COND_REPLACEMENT 1 <PARSE_CONDITION e1> <PARSE_COND e2>);    e1 '=' e2 =         (SY_COND_COND_REPLACEMENT 2 <PARSE_CONDITION e1> <PARSE_EXPRESSION e2>);    };PARSE_EXPRESSION {    e1 = <PARSE_EXPRESSION2 (e1) ()>;    };PARSE_EXPRESSION2 {    () (e1) = (e1);    (e1 t2) (e3) = <PARSE_EXPRESSION2 (e1) (<PARSE_TERM t2> e3)>;    };PARSE_TERM {    (ID_IDENT e1) = (SY_TERM 1 e1);    (ID_NUMBER e1) = (SY_TERM 1 e1);    (ID_STRING e1) = (SY_TERM 2 e1);    (ID_VAR e1) = (SY_TERM 3 e1);    ('(' e1 ')') = (SY_TERM 4 <PARSE_EXPRESSION e1>);    ('<' (ID_IDENT e1) e2 '>') = (SY_TERM 5 (e1) <PARSE_EXPRESSION e2>);    };PARSE_PATTERN {    e1 = <PARSE_PATTERN2 (e1) ()>;    };PARSE_PATTERN2 {    () (e1) = (e1);    (e1 t2) (e3) = <PARSE_PATTERN2 (e1) (<PARSE_PATTERN_TERM t2> e3)>;    };PARSE_PATTERN_TERM {    (ID_IDENT e1) = (SY_PATTERN_TERM 1 e1);    (ID_NUMBER e1) = (SY_PATTERN_TERM 1 e1);    (ID_STRING e1) = (SY_PATTERN_TERM 2 e1);    (ID_VAR e1) = (SY_PATTERN_TERM 3 e1);    ('(' e1 ')') = (SY_PATTERN_TERM 4 <PARSE_PATTERN e1>);    };RENUM_SENTENCE_LIST {    t.VarList = ;    t.VarList t1 e2 =         <RENUM_SENTENCE t.VarList t1> <RENUM_SENTENCE_LIST t.VarList e2>;    };RENUM_SENTENCE {    t.VarList (SY_SENTENCE 1 t.Pattern t.Cond) =         <RENUM_SENTENCE2 <RENUM_PATTERN t.VarList t.Pattern> t.Cond>;    t.VarList (SY_SENTENCE 2 t.Pattern t.Expr) =         <RENUM_SENTENCE3 <RENUM_PATTERN t.VarList t.Pattern> t.Expr>;    };RENUM_SENTENCE2 {    t.VarList t.NewPattern t.Cond =         (SY_SENTENCE 1 t.NewPattern             <RENUM_COND t.VarList t.Cond>        );    };RENUM_SENTENCE3 {    t.VarList t.NewPattern t.Expr =         (SY_SENTENCE 2 t.NewPattern             <TRIM_VAR_LIST <RENUM_EXPRESSION t.VarList t.Expr>>        );    };RENUM_PATTERN {    t.VarList (e1) = <RENUM_PATTERN2 (t.VarList) (e1)>;    };RENUM_PATTERN2 {    (e1 t.VarList) () = t.VarList (e1);    (e1 t.VarList) ((SY_PATTERN_TERM 3 e.Var) e2) =        <RENUM_PATTERN2             (e1 <PROCESS_VAR (SY_PATTERN_TERM 3 e.Var) t.VarList>) (e2)        >;    (e1 t.VarList) ((SY_PATTERN_TERM 4 e2) e3) =        <RENUM_PATTERN3 (e1) (<RENUM_PATTERN2 (t.VarList) e2>) (e3)>;    (e1 t.VarList) (t3 e2) =        <RENUM_PATTERN2 (e1 t3 t.VarList) (e2)>;    };RENUM_PATTERN3 {    (e1) (t.VarList (e2)) (e3) =        <RENUM_PATTERN2 (e1 (SY_PATTERN_TERM 4 (e2)) t.VarList) (e3)>;    };RENUM_COND {    t.VarList (SY_COND 1 t.Condition t.Cond) =        <RENUM_COND2 <RENUM_CONDITION t.VarList t.Condition> t.Cond>;    t.VarList (SY_COND 2 t.Condition t.Expr) =        <RENUM_COND3 <RENUM_CONDITION t.VarList t.Condition> t.Expr>;    t.VarList (SY_COND 3 t.Expr e.SentenceList) =        <RENUM_COND4 <RENUM_EXPRESSION t.VarList t.Expr> e.SentenceList>;    };RENUM_COND2 {    t.VarList t.NewCondition t.Cond =        (SY_COND 1 t.NewCondition         <RENUM_COND t.VarList t.Cond>);    };RENUM_COND3 {    t.VarList t.NewCondition t.Expr =        (SY_COND 2 t.NewCondition         <TRIM_VAR_LIST <RENUM_EXPRESSION t.VarList t.Expr>>);    };RENUM_COND4 {    t.VarList t.NewExpr e.SentenceList =        (SY_COND 3 t.NewExpr         <RENUM_SENTENCE_LIST t.VarList e.SentenceList>);    };RENUM_CONDITION {    t.VarList (SY_CONDITION t.Expr t.Pattern) =        <RENUM_CONDITION2 <RENUM_EXPRESSION t.VarList t.Expr> t.Pattern>;    };RENUM_CONDITION2 {    t.VarList t.NewExpr t.Pattern =        <RENUM_CONDITION3 t.NewExpr <RENUM_PATTERN t.VarList t.Pattern>>;    };RENUM_CONDITION3 {    t.NewExpr t.VarList t.NewPattern =        t.VarList (SY_CONDITION t.NewExpr t.NewPattern);    };RENUM_EXPRESSION {    t.VarList (e1) = <RENUM_EXPRESSION2 (t.VarList) (e1)>;    };RENUM_EXPRESSION2 {    (e1 t.VarList) () = t.VarList (e1);    (e1 t.VarList) ((SY_TERM 3 e.Var) e2) =        <RENUM_EXPRESSION2             (e1 <PROCESS_VAR (SY_TERM 3 e.Var) t.VarList>) (e2)        >;    (e1 t.VarList) ((SY_TERM 4 e2) e3) =        <RENUM_EXPRESSION3 (e1) (<RENUM_EXPRESSION2 (t.VarList) e2>) (e3)>;    (e1 t.VarList) ((SY_TERM 5 (e4) e2) e3) =        <RENUM_EXPRESSION4 (e4) (e1) (<RENUM_EXPRESSION2 (t.VarList) e2>) (e3)>;    (e1 t.VarList) (t3 e2) =        <RENUM_EXPRESSION2 (e1 t3 t.VarList) (e2)>;    };RENUM_EXPRESSION3 {    (e1) (t.VarList (e2)) (e3) =        <RENUM_EXPRESSION2 (e1 (SY_TERM 4 (e2)) t.VarList) (e3)>;    };RENUM_EXPRESSION4 {    (e4) (e1) (t.VarList (e2)) (e3) =        <RENUM_EXPRESSION2 (e1 (SY_TERM 5 (e4) (e2)) t.VarList) (e3)>;    };PROCESS_VAR {    (s.Tag1 s.Tag2 e.Var) (e.Left ((e.Var)(e.NewVar)) e.Right) =        (s.Tag1 s.Tag2 e.NewVar) (e.Left ((e.Var)(e.NewVar)) e.Right);    (s.Tag1 s.Tag2 s.Type '.' e.Var) (s.Count e1) =        <PROCESS_VAR2            (s.Tag1 s.Tag2 s.Type '.' e.Var) (s.Count e1)            s.Type '.' <SYMB s.Count>        >;    };PROCESS_VAR2 {    (s.Tag1 s.Tag2 e.Var) (s.Count e1) e.NewVar =        (s.Tag1 s.Tag2 e.NewVar)        (<ADD (s.Count) 1> e1 ((e.Var)(e.NewVar)));    };TRIM_VAR_LIST {    t.VarList t1 = t1;    };RSB_GEN {    e1 = <PROUT 'Program generation in progress ...'>         <CALC_LEN <GEN_PROGRAM e1>>         <PROUT '    done (current step is ' <STEP> ').'>;    };CALC_LEN {    = ;    (s.Tag e1) e2 = (s.Tag <CALC_LEN2 e1 0>) <CALC_LEN e2>;    (e1) e2 = (<CALC_LEN e1>) <CALC_LEN e2>;    };CALC_LEN2 {    s.CommonLen = s.CommonLen;    (e1) e2 s.CommonLen = <CALC_LEN3 (<LENW e1>) e2 s.CommonLen>;    };CALC_LEN3 {    (s.Len e1) e2 s.CommonLen =         (e1 s.Len) <CALC_LEN2 e2 <ADD (s.CommonLen) s.Len>>;    };GEN_PROGRAM {    = ;    (e1) e2 = <GEN_FUNCTION_DEF e1> <GEN_PROGRAM e2>;    };GEN_FUNCTION_DEF {    SY_FUNCTION_DEF 1 (e.Name) e1 = <GEN_FUNCTION_DEF2 (e.Name) e1>;    SY_FUNCTION_DEF 2 (e.Name) e1 = <GEN_FUNCTION_DEF2 ('$ENTRY ' e.Name) e1>;    SY_FUNCTION_DEF 3 e1 = (LY_EXTERNAL ('$EXTERNAL ') <GEN_FUNCTION_DEF3 e1>);    };GEN_FUNCTION_DEF2 {    (e.Name) e1 =        (LY_FUNC_BEGIN (e.Name ' {'))         (<GEN_SENTENCE_LIST e1>)        (LY_FUNC_END ('    };'));    };GEN_FUNCTION_DEF3 {    (e1) = (e1 ';');    (e1) e2 = (e1 ', ') <GEN_FUNCTION_DEF3 e2>;    };GEN_SENTENCE_LIST {    = ;    (e1) e2 = <GEN_SENTENCE e1> <GEN_SENTENCE_LIST e2>;    };GEN_SENTENCE {    SY_SENTENCE 1 (e.Pattern) (e.Cond) =         <GEN_PATTERN e.Pattern (', ') LY_SENTENCE_PATTERN>         <GEN_COND e.Cond>;    SY_SENTENCE 2 (e.Pattern) (e.Expression) =         <GEN_PATTERN e.Pattern ('= ') LY_SENTENCE_PATTERN>         <GEN_EXPRESSION e.Expression (';') LY_SENTENCE_EXPRESSION>;    };GEN_COND {    SY_COND 1 (e.Condition) (e.Cond) =        <GEN_CONDITION e.Condition (', ')> <GEN_COND e.Cond>;    SY_COND 2 (e.Condition) (e.Expression) =        <GEN_CONDITION e.Condition ('= ')>         <GEN_EXPRESSION e.Expression (';') LY_COND_EXPRESSION1>;    SY_COND 3 (e.Expression) e.SentenceList =        <GEN_EXPRESSION e.Expression (': ') LY_COND_EXPRESSION2>        (LY_LIST_BEGIN ('{'))        (<GEN_SENTENCE_LIST e.SentenceList>)        (LY_LIST_END ('};'));    SY_COND 4 e.CondCondReplacementList =        (LY_LIST_BEGIN ('{'))        (<GEN_COND_COND_REPLACEMENT_LIST e.CondCondReplacementList>)        (LY_LIST_END ('};'));    };GEN_CONDITION {    SY_CONDITION (e.Expression) (e.Pattern) (e1) =        <GEN_EXPRESSION e.Expression (': ') LY_CONDITION_EXPRESSION>         <GEN_PATTERN e.Pattern (e1) LY_CONDITION_PATTERN>;    };GEN_COND_COND_REPLACEMENT_LIST {    = ;    (e1) e2 =         <GEN_COND_COND_REPLACEMENT e1>        <GEN_COND_COND_REPLACEMENT_LIST e2>;    };GEN_COND_COND_REPLACEMENT {    SY_COND_COND_REPLACEMENT 1 (e.Condition) (e.Cond) =        <GEN_CONDITION e.Condition (', ')>        <GEN_COND e.Cond>;    SY_COND_COND_REPLACEMENT 2 (e.Condition) (e.Expression) =        <GEN_CONDITION e.Condition ('= ')>        <GEN_EXPRESSION e.Expression (';') LY_COND_EXPRESSION1>;    };GEN_EXPRESSION {    e1 s2 = (s2 <GEN_EXPRESSION2 e1>);    };GEN_EXPRESSION2 {    (e1) = (e1);    (e1) (e2) = <APPEND <GEN_TERM e1> (e2)>;    (e1) e2 (e3) = <GEN_TERM e1> <GEN_EXPRESSION2 e2 (e3)>;    };GEN_TERM {    SY_TERM 5 (e.FuncName) () = ('<' e.FuncName '> ');    SY_TERM 5 (e.FuncName) (e.Expr) =         ('<' e.FuncName ' ') <GEN_EXPRESSION2 e.Expr ()> ('> ');    SY_TERM 4 (e.Expr) = ('(') <GEN_EXPRESSION2 e.Expr ()> (') ');    SY_TERM 2 e.String = <GEN_STRING e.String>;    SY_TERM s1 e2 = (e2 ' ');    };GEN_PATTERN {    e1 s2 = (s2 <GEN_PATTERN2 e1>);    };GEN_PATTERN2 {    (e1) = (e1);    (e1) (e2) = <APPEND <GEN_PATTERN_TERM e1> (e2)>;    (e1) e2 (e3) = <GEN_PATTERN_TERM e1> <GEN_PATTERN2 e2 (e3)>;    };GEN_PATTERN_TERM {    SY_PATTERN_TERM 4 (e.Pattern) = ('(') <GEN_PATTERN2 e.Pattern ()> (') ');    SY_PATTERN_TERM 2 e.String = <GEN_STRING e.String>;    SY_PATTERN_TERM s1 e2 = (e2 ' ');    };GEN_STRING {    '' = ('''' ' ');    '' e1 = ('''' ' ') <GEN_STRING e1>;    e1 = ("'" <GEN_STRING2 e1> "' ");    };GEN_STRING2 {    e1 "'" e2 = e1 "''" <GEN_STRING2 e2>;    e1 = e1;    };APPEND {    e3 (e1) (e2) = e3 (e1 e2);    }RSB_LAYOUT {    e1 = <PROUT 'Layout generation in progress ...'>         <RSB_LAYOUT2 e1>         <PROUT '    done (current step is ' <STEP> ').'>;    };RSB_LAYOUT2 {    = ;    (LY_EXTERNAL e1) e2 =         <LAYOUT_EXTERNAL e1> <RSB_LAYOUT2 e2>;    (LY_FUNC_BEGIN (e1 s7) s5) (e2) (LY_FUNC_END (e3 s8) s6) e4 =        e1 CAR_RET         <LAYOUT_SENTENCE_LIST e2 4>        e3 CAR_RET CAR_RET        <RSB_LAYOUT2 e4>;    };LAYOUT_EXTERNAL {    e1 s.Len = <TRIM_LAYOUT_INFO <OUT_PIECE e1 s.Len 0>> CAR_RET CAR_RET;    };LAYOUT_SENTENCE_LIST {    s.Indent = ;    (LY_SENTENCE_PATTERN e1) (LY_SENTENCE_EXPRESSION e2) e3 s.Indent =        <BLANK s.Indent>         <LAYOUT_SENTENCE_LIST2 (<OUT_PIECE e1 s.Indent>) e2 s.Indent> CAR_RET        <LAYOUT_SENTENCE_LIST e3 s.Indent>;    (LY_SENTENCE_PATTERN e1) e2 s.Indent =        <BLANK s.Indent> <TRIM_LAYOUT_INFO <OUT_PIECE e1 s.Indent>> CAR_RET        <LAYOUT_SENTENCE_LIST4 <LAYOUT_COND e2 <ADD (s.Indent) 4>> s.Indent>;    };LAYOUT_SENTENCE_LIST2 {    (e1 (s2 1)) e3 s.Indent =         e1 CAR_RET <BLANK <ADD (s.Indent) 4>>         <TRIM_LAYOUT_INFO <OUT_PIECE e3 <ADD (s.Indent) 4>>> CAR_RET;    (e1 (s2 0)) e3 s.Indent =         e1 <LAYOUT_SENTENCE_LIST3 <OUT_PIECE e3 s2> (e3) s.Indent> CAR_RET;    };LAYOUT_SENTENCE_LIST3 {    e1 (s2 0) (e3) s.Indent = e1;    e1 (s2 1) (e3) s.Indent =         CAR_RET <BLANK <ADD (s.Indent) 4>>         <TRIM_LAYOUT_INFO <OUT_PIECE e3 <ADD (s.Indent) 4>>>;    };LAYOUT_SENTENCE_LIST4 {    (e1) e2 s.Indent = e1 CAR_RET <LAYOUT_SENTENCE_LIST e2 s.Indent>;    };LAYOUT_COND {    e1 s.Indent = <LAYOUT_COND2 () (e1) s.Indent>;    };LAYOUT_COND2 {    (e1)     (        (LY_CONDITION_EXPRESSION e2)         (LY_CONDITION_PATTERN e3)        (LY_COND_EXPRESSION1 e4)        e5    )     s.Indent =        (            e1             <BLANK s.Indent> <LAYOUT_COND3 (e2) e3 s.Indent> CAR_RET            <BLANK s.Indent> <TRIM_LAYOUT_INFO <OUT_PIECE e4 s.Indent>> CAR_RET        )        e5;    (e1)     (        (LY_CONDITION_EXPRESSION e2)         (LY_CONDITION_PATTERN e3)        e5    )     s.Indent =        <LAYOUT_COND2            (                e1                 <BLANK s.Indent> <LAYOUT_COND3 (e2) e3 s.Indent> CAR_RET            )            (e5)             s.Indent        >;    (e1)    (        (LY_COND_EXPRESSION2 e2)        (LY_LIST_BEGIN (e3 s4) s5)        (e6)        (LY_LIST_END (e7 s8) s9)        e.10    )    s.Indent =        (            e1            <BLANK s.Indent> <TRIM_LAYOUT_INFO <OUT_PIECE e2 s.Indent>> CAR_RET            <BLANK s.Indent> e3 CAR_RET            <LAYOUT_SENTENCE_LIST e6 <ADD (s.Indent) 4>>            <BLANK s.Indent> e7 CAR_RET        )        e.10;    };LAYOUT_COND3 {    (e1) e2 s.Indent = <LAYOUT_COND4 (<OUT_PIECE e1 s.Indent>) e2 s.Indent>;    };LAYOUT_COND4 {    (e1 (s2 1)) e3 s.Indent =         e1 CAR_RET <BLANK <ADD (s.Indent) 4>>         <TRIM_LAYOUT_INFO <OUT_PIECE e3 <ADD (s.Indent) 4>>>;    (e1 (s2 0)) e3 s.Indent =         e1 <LAYOUT_COND5 <OUT_PIECE e3 s2> (e3) s.Indent>;    };LAYOUT_COND5 {    e1 (s2 0) (e3) s.Indent = e1;    e1 (s2 1) (e3) s.Indent =         CAR_RET <BLANK <ADD (s.Indent) 4>>         <TRIM_LAYOUT_INFO <OUT_PIECE e3 <ADD (s.Indent) 4>>>;    };OUT_PIECE {    e1 s.Len s.Indent =         <OUT_PIECE2 (e1) (<SUB (80) <ADD (s.Len) s.Indent>>) s.Len s.Indent>;    };OUT_PIECE2 {    (e1) (s2) s.Len s.Indent = <OUT_SOLID e1> (<ADD (s.Len) s.Indent> 0);    (e1) ('-' s2) s.Len s.Indent = <OUT_BROKEN e1 s.Indent>;    };OUT_SOLID {    = ;    (e1 s2) e3 = e1 <OUT_SOLID e3>;    };OUT_BROKEN {    e1 s.Indent = <OUT_BROKEN2 <COLLECT e1 s.Indent>>;    };OUT_BROKEN2 {    (e1) () s.Right s.Indent =         <OUT_SOLID e1> (s.Right 1);    (e1) (e2) s.Right s.Indent =         <OUT_SOLID e1> CAR_RET <BLANK s.Indent>        <OUT_BROKEN (<BLANK 4> 4) e2 s.Indent>;    };COLLECT {    ('    ' 4) (e1 s2) e3 s.Indent =         <COLLECT4 ('    ' 4) (e1 s2) e3 s.Indent (<SUB (76) <ADD (s.Indent) s2>>)>;    (e1 s2) e3 s.Indent =         <COLLECT4 (e1 s2) e3 s.Indent (<SUB (80) <ADD (s.Indent) s2>>)>;    };COLLECT4 {    e1 s.Indent (s2) = <COLLECT2 () (e1) s.Indent> s.Indent;    ('    ' 4) (e1 s2) e3 s.Indent ('-' s4) =         (('    ' 4) (e1 s2)) (e3) <ADD (s.Indent) s2> s.Indent;    (e1 s2) e3 s.Indent ('-' s4) =         ((e1 s2)) (e3) <ADD (s.Indent) s2> s.Indent;    };COLLECT2 {    (e1) () s.Indent = (e1) () s.Indent;    (e1) ((e2 s3) e4) s.Indent =         <COLLECT3             (e1) ((e2 s3) e4)             <ADD (s.Indent) s3>            (<SUB (80) <ADD (s.Indent) s3>>)        >;    };COLLECT3 {    (e1) ((e2 s3) e4) s.NewIndent (s5) =        <COLLECT2 (e1 (e2 s3)) (e4) s.NewIndent>;    (e1) ((e2 s3) e4) s.NewIndent ('-' s5) =        (e1) ((e2 s3) e4) s.NewIndent;    };TRIM_LAYOUT_INFO {    e1 (e2) = e1;    };BLANK {    0 = ;    s1 = ' ' <BLANK <SUB (s1) 1>>;    };
