$ENTRY GO {
    = <Prout 'Refal-5 Source Beautifier'>
      <Prout '    source-file : ' <Arg 1>>      
      <Prout '    flag        : ' <Arg 2>>
      <Prout '----------------/'>
      <Open 'r' 1 <Arg 1>>
      <SAVEFILE 0
          '/*' 
          CAR_RET
          ' * This program was produced by decompiler from assembler source.'
          CAR_RET
          ' * (C) 2000 Serge Skorobogatoff'
          CAR_RET
          ' */'
          CAR_RET CAR_RET
          <RSB_LAYOUT 
              <RSB_GEN 
                  <RSB_PARSE <Arg 2>
                      <RSB_STRUC <RSB_LEX <LOADFILE 1>>>
                  >
              >
          >          
      >;
    };

LOADFILE {
    s.1 = <LOADFILE2 s.1 <Get s.1>>;
    };

LOADFILE2 {
    s.1 0 = ;
    s.1 e.2 0 = e.2;
    s.1 e.2 = e.2 CAR_RET <LOADFILE s.1>;
    };

SAVEFILE {
    s.1 = ;
    s.1 e.2 CAR_RET e.3 = <Put s.1 e.2> <SAVEFILE s.1 e.3>;
    s.1 e.2 = <Put s.1 e.2>;
    };

******************************************************************************
* Лексический анализ
******************************************************************************

/* Лексический анализатор текста */
RSB_LEX {
    e.1 = <Prout 'Lexical analysis in progress ...'>
         <UNITE_STRINGS <BREAK <REMOVE_COMMENTS e.1>>>
         <Prout '    done (current Step is 1).'>;
    };

/* Убирает комментарии и символы CAR_RET из текста, а также заменяет
   символы табуляции на пробелы */
REMOVE_COMMENTS {
    e.1 = <REMOVE_COMMENTS2 CAR_RET e.1 CAR_RET>;
    };

REMOVE_COMMENTS2 {
    CAR_RET '*' e.1 CAR_RET e.2 = <REMOVE_COMMENTS2 CAR_RET e.2>;
    '/*' e.1 '*/' e.2 = <REMOVE_COMMENTS2 e.2>;
    '\'' e.1 '\'' e.2 = '\'' e.1 '\'' <REMOVE_COMMENTS2 e.2>;
    '"' e.1 '"' e.2 = '"' e.1 '"' <REMOVE_COMMENTS2 e.2>;
    CAR_RET e.1 = <REMOVE_COMMENTS2 e.1>;
    '	' e.1 = <REMOVE_COMMENTS2 ' ' e.1>;
    s.1 e.2 = s.1 <REMOVE_COMMENTS2 e.2>;
    = ;
    };

/* Разбивает текст на лексемы, распознает тип лексем */
BREAK {
    = ;
    '"' e.1 = <BREAK3 <PICK_OUT_STRING '"' e.1>>;
    '\'' e.1 = <BREAK3 <PICK_OUT_STRING '\'' e.1>>;
    ' ' e.1 = <BREAK e.1>;
    
    e.1 '\'' e.2 = <BREAK4 (e.1) (e.2)>;
    e.1 '"' e.2 = <BREAK5 (e.1) (e.2)>;

    e.1 ' ' e.2 = <BREAK2 e.1> <BREAK e.2>;
    e.1 = <BREAK2 e.1>;
    };

BREAK4 {
    (e.1 '"' e.3) (e.2) = <BREAK e.1> <BREAK '"' e.3 '\'' e.2>;
    (e.1) (e.2) = <BREAK e.1> <BREAK '\'' e.2>;
    };

BREAK5 {
    (e.1 '\'' e.3) (e.2) = <BREAK e.1> <BREAK '\'' e.3 '"' e.2>;
    (e.1) (e.2) = <BREAK e.1> <BREAK '"' e.2>;
    };

BREAK3 {
    (e.2) e.3 = (e.2) <BREAK e.3>;
    };

BREAK2 {
    = ;

    e.1 '(' e.2 = <BREAK2 e.1> '(' <BREAK2 e.2>;
    e.1 ')' e.2 = <BREAK2 e.1> ')' <BREAK2 e.2>;
    e.1 '<' e.2 = <BREAK2 e.1> '<' <BREAK2 e.2>;
    e.1 '>' e.2 = <BREAK2 e.1> '>' <BREAK2 e.2>;
    e.1 '=' e.2 = <BREAK2 e.1> '=' <BREAK2 e.2>;
    e.1 ';' e.2 = <BREAK2 e.1> ';' <BREAK2 e.2>;
    e.1 ':' e.2 = <BREAK2 e.1> ':' <BREAK2 e.2>;
    e.1 ',' e.2 = <BREAK2 e.1> ',' <BREAK2 e.2>;
    e.1 '{' e.2 = <BREAK2 e.1> '{' <BREAK2 e.2>;
    e.1 '}' e.2 = <BREAK2 e.1> '}' <BREAK2 e.2>;

    e.1 '+' e.2 = <BREAK2 e.1> (ID_IDENT 'Add') <BREAK2 e.2>;
    /*e.1 '-' e.2 = <BREAK2 e.1> (ID_IDENT 'Sub') <BREAK2 e.2>;*/
    e.1 '*' e.2 = <BREAK2 e.1> (ID_IDENT 'MUL') <BREAK2 e.2>;
    e.1 '/' e.2 = <BREAK2 e.1> (ID_IDENT 'DIV') <BREAK2 e.2>;

    '$ENTRY' = ID_ENTRY;
    '$EXTERNAL' = ID_EXTERNAL;
    '$EXTERN' = ID_EXTERNAL;
    '$EXTRN' = ID_EXTERNAL;

    's' e.2 = (ID_VAR 's' <Add_POINT e.2>);
    't' e.2 = (ID_VAR 't' <Add_POINT e.2>);
    'e' e.2 = (ID_VAR 'e' <Add_POINT e.2>);

    '0' e.2 = (ID_NUMBER '0' e.2);
    '1' e.2 = (ID_NUMBER '1' e.2);
    '2' e.2 = (ID_NUMBER '2' e.2);
    '3' e.2 = (ID_NUMBER '3' e.2);
    '4' e.2 = (ID_NUMBER '4' e.2);
    '5' e.2 = (ID_NUMBER '5' e.2);
    '6' e.2 = (ID_NUMBER '6' e.2);
    '7' e.2 = (ID_NUMBER '7' e.2);
    '8' e.2 = (ID_NUMBER '8' e.2);
    '9' e.2 = (ID_NUMBER '9' e.2);

    e.1 = (ID_IDENT e.1);
    };

/* Выделяет из начала выражения строку */
PICK_OUT_STRING {
    s.Quot s.Quot e.1 = (ID_STRING s.Quot) e.1;
    s.Quot e.1 = <PICK_OUT_STRING (ID_STRING) s.Quot e.1>;

    (e.1) s.Quot s.Quot s.Quot e.2 = <PICK_OUT_STRING (e.1 s.Quot) s.Quot e.2>;
    (e.1) s.Quot s.Quot e.2 = (e.1) e.2;
    (e.1) s.Quot s.2 e.3 = <PICK_OUT_STRING (e.1 s.2) s.Quot e.3>;
    };

/* Добавляет точку в начало выражения, если ее нет */
Add_POINT {
    '.' e.1 = '.' e.1;
    e.1 = '.' e.1;
    };

/* Объединяет последовательно идущие строки (возможность отключена) */
UNITE_STRINGS {
/*    e.1 (ID_STRING e.Str1) (ID_STRING e.Str2) e.2 =
        e.1 <UNITE_STRINGS (ID_STRING e.Str1 e.Str2) e.2>;*/
    e.1 = e.1;
    };

******************************************************************************
* Структурирование текста
******************************************************************************

/* Структуризатор текста Рефал-программы */
RSB_STRUC {
    e.1 = <Prout 'Bracket detection in progress ...'>
         <RSB_STRUC2 e.1>
         <Prout '    done (current Step is 1).'>;
    };

RSB_STRUC2 {
    e.1 '{' e.2 = e.1 <RSB_STRUC3 <SEARCH '}' ('{') (e.2)>>;
    e.1 = e.1;
    };

RSB_STRUC3 {
    (e.1) () = (e.1);
    (e.1) (e.2) = (e.1) <RSB_STRUC2 e.2>;
    };

/* Ищет парную скобку */
SEARCH {
    s.What (e.1) (s.What e.2) = (e.1 s.What) (e.2);

    s.What (e.1) ('{' e.3) = <SEARCH2 s.What (e.1) <SEARCH '}' ('{') (e.3)>>;

    s.What (e.1) ('(' e.3) = <SEARCH2 s.What (e.1) <SEARCH ')' ('(') (e.3)>>;

    s.What (e.1) ('<' e.3) = <SEARCH2 s.What (e.1) <SEARCH '>' ('<') (e.3)>>;

    s.What (e.1) (t.2 e.3) = <SEARCH s.What (e.1 t.2) (e.3)>;
    };

SEARCH2 {
    s.What (e.1) (e.4) (e.5) = <SEARCH s.What (e.1 (e.4)) (e.5)>;
    };

******************************************************************************
* Синтаксический анализ и перенумерование переменных
******************************************************************************

/* Синтаксис Рефала:

   program ::= 
       function-def 
       | function-def program

   function-def ::= 
       [$ENTRY] ident { sentence-list } [;]
       | $EXTERNAL ident-clist ;
       | $EXTERN ident-clist ;
       | $EXTRN ident-clist ;

   ident-clist ::=
       ident
       | ident , ident-clist

   sentence-list ::=
       sentence [;]
       | sentence ; sentence-list

   sentence ::= 
       pattern , cond
       | pattern = expression

   cond ::=
       condition , cond
       | condition = expression
       | expression : { sentence-list }
       | { cond-cond-replacement-list }

   condition ::= expression : pattern

   cond-cond-replacement-list ::=
       cond-cond-replacement [;]
       | cond-cond-replacement ; cond-cond-replacement-list

   cond-cond-replacement ::= 
       condition , cond
       | condition = expression

   expression ::= 
       empty 
       | term expression

   term ::= 
       Symbol 
       | string
       | variable 
       | (expression) 
       | <function-name expression>

   pattern ::=
       empty
       | pattern-term pattern

   pattern-term ::= 
       Symbol 
       | string
       | variable 
       | (pattern) 

   function-name ::= compound-Symbol

   empty ::=
*/

/* Синтаксический анализатор текста */
RSB_PARSE {
    e.1 = 
         <Prout 'Syntactic analysis in progress ...'>
         <PARSE_PROGRAM e.1>
         <Prout '    done (current Step is 1).'>;
    };

/* 
 * program ::= 
 *     function-def 
 *     | function-def program
 *
 * Формат дерева: function-def ... function-def
 */
PARSE_PROGRAM {
    e.1 = <PARSE_PROGRAM2 <PARSE_FUNCTION_DEF e.1>>;
    };

PARSE_PROGRAM2 {
    = ;
    (e.1) ('T') = (e.1);
    (e.1) ('F') = (e.1);
    (e.1) (e.2) = (e.1) <PARSE_PROGRAM e.2>;
    };

/*
 * function-def ::= 
 *     [$ENTRY] ident { sentence-list } [;]
 *     | $EXTERNAL ident-clist ;
 *     | $EXTERN ident-clist ;
 *     | $EXTRN ident-clist ;
 *
 * Формат дерева: 
 *     (SY_FUNCTION_DEF 1 (ident) sentence-list)
 *         для функции без $ENTRY
 *     (SY_FUNCTION_DEF 2 (ident) sentence-list)
 *         для функции с $ENTRY
 *     (SY_FUNCTION_DEF 3 (ident)...(ident))
 *         для функций с $EXTRN, $EXTERN и $EXTERNAL
 */
PARSE_FUNCTION_DEF {
    s.RenumFlag = ;

    s.RenumFlag ID_EXTERNAL e.1 ';' e.2 = 
        (SY_FUNCTION_DEF 3 <PARSE_IDENT_CLIST e.1>) (s.RenumFlag e.2);
    
    s.RenumFlag (ID_IDENT 'LASM1') ('{' e.2 '}') ';' e.3 =
        (SY_FUNCTION_DEF 2 (<Upper <Arg 4>>) <PARSE_FUNCTION_DEF2 s.RenumFlag e.2>) 
        (s.RenumFlag e.3);

    s.RenumFlag (ID_IDENT 'LASM1') ('{' e.2 '}') e.3 =
        (SY_FUNCTION_DEF 2 (<Upper <Arg 4>>) <PARSE_FUNCTION_DEF2 s.RenumFlag e.2>) 
        (s.RenumFlag e.3);

    s.RenumFlag (ID_IDENT e.1) ('{' e.2 '}') ';' e.3 =
        (SY_FUNCTION_DEF 1 (e.1) <PARSE_FUNCTION_DEF2 s.RenumFlag e.2>) 
        (s.RenumFlag e.3);

    s.RenumFlag (ID_IDENT e.1) ('{' e.2 '}') e.3 =
        (SY_FUNCTION_DEF 1 (e.1) <PARSE_FUNCTION_DEF2 s.RenumFlag e.2>) 
        (s.RenumFlag e.3);

    s.RenumFlag ID_ENTRY (ID_IDENT e.1) ('{' e.2 '}') ';' e.3 =
        (SY_FUNCTION_DEF 2 (e.1) <PARSE_FUNCTION_DEF2 s.RenumFlag e.2>) 
        (s.RenumFlag e.3);

    s.RenumFlag ID_ENTRY (ID_IDENT e.1) ('{' e.2 '}') e.3 =
        (SY_FUNCTION_DEF 2 (e.1) <PARSE_FUNCTION_DEF2 s.RenumFlag e.2>) 
        (s.RenumFlag e.3);
    };

PARSE_FUNCTION_DEF2 {
    'T' e.1 = <RENUM_SENTENCE_LIST (1) <PARSE_SENTENCE_LIST e.1>>;
    'F' e.1 = <PARSE_SENTENCE_LIST e.1>;
    };

/*
 * ident-clist ::=
 *     ident
 *     | ident , ident-clist
 *
 * Формат дерева: (ident)...(ident)
 */
PARSE_IDENT_CLIST {
    (ID_IDENT e.1) ',' e.2 = (e.1) <PARSE_IDENT_CLIST e.2>;
    (ID_IDENT e.1) = (e.1);
    };

/*
 * sentence-list ::=
 *     sentence [;]
 *     | sentence ; sentence-list
 *
 * Формат дерева: sentence...sentence
 */
PARSE_SENTENCE_LIST {
    e.1 ';;' t.2 e.3 = <PARSE_SENTENCE e.1> <PARSE_SENTENCE_LIST t.2 e.3>;
    e.1 ';' t.2 e.3 = <PARSE_SENTENCE e.1> <PARSE_SENTENCE_LIST t.2 e.3>;
    e.1 ';' = <PARSE_SENTENCE e.1>;
    e.1 = <PARSE_SENTENCE e.1>;
    };

/*
 * sentence ::= 
 *     pattern , cond
 *     | pattern = expression
 *
 * Формат дерева:
 *     (SY_SENTENCE 1 pattern cond)
 *     (SY_SENTENCE 2 pattern expression)
 */

PARSE_SENTENCE {
    e.1 ',' e.2 = (SY_SENTENCE 1 <PARSE_PATTERN e.1> <PARSE_COND e.2>);
    e.1 '=' e.2 = (SY_SENTENCE 2 <PARSE_PATTERN e.1> <PARSE_EXPRESSION e.2>);
    };

/*
 * cond ::=
 *     condition , cond
 *     | condition = expression
 *     | expression : { sentence-list }
 *     | { cond-cond-replacement-list }
 *
 * Формат дерева:
 *     (SY_COND 1 condition cond)
 *     (SY_COND 2 condition expression)
 *     (SY_COND 3 expression sentence-list)
 *     (SY_COND 4 cond-cond-replacement-list)
 */
PARSE_COND {
    e.1 ',' e.2 = (SY_COND 1 <PARSE_CONDITION e.1> <PARSE_COND e.2>);
    e.1 '=' e.2 = (SY_COND 2 <PARSE_CONDITION e.1> <PARSE_EXPRESSION e.2>);
    e.1 ':' ('{' e.2 '}') = 
        (SY_COND 3 <PARSE_EXPRESSION e.1> <PARSE_SENTENCE_LIST e.2>);
    ('{' e.1 '}') = (SY_COND 4 <PARSE_COND_COND_REPLACEMENT_LIST e.1>);
    };

/*
 * condition ::= expression : pattern
 *
 * Формат дерева: (SY_CONDITION expression pattern)
 */
PARSE_CONDITION {
    e.1 ':' e.2 = (SY_CONDITION <PARSE_EXPRESSION e.1> <PARSE_PATTERN e.2>);
    };

/*
 * cond-cond-replacement-list ::=
 *     cond-cond-replacement [;]
 *     | cond-cond-replacement ; cond-cond-replacement-list
 *
 * Формат дерева: cond-cond-replacement...cond-cond-replacement
 */
PARSE_COND_COND_REPLACEMENT_LIST {
    e.1 ';;' t.2 e.3 = 
        <PARSE_COND_COND_REPLACEMENT e.1> <PARSE_COND_COND_REPLACEMENT_LIST t.2 e.3>;

    e.1 ';' t.2 e.3 = 
        <PARSE_COND_COND_REPLACEMENT e.1> <PARSE_COND_COND_REPLACEMENT_LIST t.2 e.3>;

    e.1 ';' = <PARSE_COND_COND_REPLACEMENT e.1>;
    e.1 = <PARSE_COND_COND_REPLACEMENT e.1>;
    };

/*
 * cond-cond-replacement ::= 
 *     condition , cond
 *     | condition = expression
 *
 * Формат дерева:
 *     (SY_COND_COND_REPLACEMENT 1 condition cond)
 *     (SY_COND_COND_REPLACEMENT 2 condition expression)
 */
PARSE_COND_COND_REPLACEMENT {
    e.1 ',' e.2 = 
        (SY_COND_COND_REPLACEMENT 1 <PARSE_CONDITION e.1> <PARSE_COND e.2>);

    e.1 '=' e.2 = 
        (SY_COND_COND_REPLACEMENT 2 <PARSE_CONDITION e.1> <PARSE_EXPRESSION e.2>);
    };

/*
 * expression ::= 
 *     empty 
 *     | term expression
 *
 * Формат дерева:
 *     ()
 *     (term ... term)
 */
PARSE_EXPRESSION {
    e.1 = <PARSE_EXPRESSION2 (e.1) ()>;
    };

PARSE_EXPRESSION2 {
    () (e.1) = (e.1);
    (e.1 t.2) (e.3) = <PARSE_EXPRESSION2 (e.1) (<PARSE_TERM t.2> e.3)>;
    };

/*
 * term ::= 
 *     Symbol 
 *     | string
 *     | variable 
 *     | (expression) 
 *     | <function-name expression>
 *
 * Формат дерева:
 *     (SY_TERM 1 Symbol)
 *     (SY_TERM 2 string)
 *     (SY_TERM 3 variable)
 *     (SY_TERM 4 expression)
 *     (SY_TERM 5 (function-name) expression)
 */
PARSE_TERM {
    (ID_IDENT e.1) = (SY_TERM 1 e.1);
    (ID_NUMBER e.1) = (SY_TERM 1 e.1);
    (ID_STRING e.1) = (SY_TERM 2 e.1);
    (ID_VAR e.1) = (SY_TERM 3 e.1);
    ('(' e.1 ')') = (SY_TERM 4 <PARSE_EXPRESSION e.1>);
    ('<' (ID_IDENT e.1) e.2 '>') = (SY_TERM 5 (e.1) <PARSE_EXPRESSION e.2>);
    };

/*
 * pattern ::=
 *     empty
 *     | pattern-term pattern
 *
 * Формат дерева:
 *     ()
 *     (pattern-term ... pattern-term)
 */
PARSE_PATTERN {
    e.1 = <PARSE_PATTERN2 (e.1) ()>;
    };

PARSE_PATTERN2 {
    () (e.1) = (e.1);
    (e.1 t.2) (e.3) = <PARSE_PATTERN2 (e.1) (<PARSE_PATTERN_TERM t.2> e.3)>;
    };

/*
 * pattern-term ::= 
 *     Symbol 
 *     | string
 *     | variable 
 *     | (pattern) 
 *
 * Формат дерева:
 *     (SY_PATTERN_TERM 1 Symbol)
 *     (SY_PATTERN_TERM 2 string)
 *     (SY_PATTERN_TERM 3 variable)
 *     (SY_PATTERN_TERM 4 pattern)
 */
PARSE_PATTERN_TERM {
    (ID_IDENT e.1) = (SY_PATTERN_TERM 1 e.1);
    (ID_NUMBER e.1) = (SY_PATTERN_TERM 1 e.1);
    (ID_STRING e.1) = (SY_PATTERN_TERM 2 e.1);
    (ID_VAR e.1) = (SY_PATTERN_TERM 3 e.1);
    ('(' e.1 ')') = (SY_PATTERN_TERM 4 <PARSE_PATTERN e.1>);
    };

/* Осуществляет перенумерование переменных */
RENUM_SENTENCE_LIST {
    t.VarList = ;

    t.VarList t.1 e.2 = 
        <RENUM_SENTENCE t.VarList t.1> <RENUM_SENTENCE_LIST t.VarList e.2>;
    };

RENUM_SENTENCE {
    t.VarList (SY_SENTENCE 1 t.Pattern t.Cond) = 
        <RENUM_SENTENCE2 <RENUM_PATTERN t.VarList t.Pattern> t.Cond>;

    t.VarList (SY_SENTENCE 2 t.Pattern t.Expr) = 
        <RENUM_SENTENCE3 <RENUM_PATTERN t.VarList t.Pattern> t.Expr>;
    };

RENUM_SENTENCE2 {
    t.VarList t.NewPattern t.Cond = 
        (SY_SENTENCE 1 t.NewPattern 
            <RENUM_COND t.VarList t.Cond>
        );
    };

RENUM_SENTENCE3 {
    t.VarList t.NewPattern t.Expr = 
        (SY_SENTENCE 2 t.NewPattern 
            <TRIM_VAR_LIST <RENUM_EXPRESSION t.VarList t.Expr>>
        );
    };

RENUM_PATTERN {
    t.VarList (e.1) = <RENUM_PATTERN2 (t.VarList) (e.1)>;
    };

RENUM_PATTERN2 {
    (e.1 t.VarList) () = t.VarList (e.1);

    (e.1 t.VarList) ((SY_PATTERN_TERM 3 e.Var) e.2) =
        <RENUM_PATTERN2 
            (e.1 <PROCESS_VAR (SY_PATTERN_TERM 3 e.Var) t.VarList>) (e.2)
        >;

    (e.1 t.VarList) ((SY_PATTERN_TERM 4 e.2) e.3) =
        <RENUM_PATTERN3 (e.1) (<RENUM_PATTERN2 (t.VarList) e.2>) (e.3)>;

    (e.1 t.VarList) (t.3 e.2) =
        <RENUM_PATTERN2 (e.1 t.3 t.VarList) (e.2)>;
    };

RENUM_PATTERN3 {
    (e.1) (t.VarList (e.2)) (e.3) =
        <RENUM_PATTERN2 (e.1 (SY_PATTERN_TERM 4 (e.2)) t.VarList) (e.3)>;
    };

RENUM_COND {
    t.VarList (SY_COND 1 t.Condition t.Cond) =
        <RENUM_COND2 <RENUM_CONDITION t.VarList t.Condition> t.Cond>;

    t.VarList (SY_COND 2 t.Condition t.Expr) =
        <RENUM_COND3 <RENUM_CONDITION t.VarList t.Condition> t.Expr>;

    t.VarList (SY_COND 3 t.Expr e.SentenceList) =
        <RENUM_COND4 <RENUM_EXPRESSION t.VarList t.Expr> e.SentenceList>;

/*    (SY_COND 4 e.CondCondReplacementList) = */
    };

RENUM_COND2 {
    t.VarList t.NewCondition t.Cond =
        (SY_COND 1 t.NewCondition 
        <RENUM_COND t.VarList t.Cond>);
    };

RENUM_COND3 {
    t.VarList t.NewCondition t.Expr =
        (SY_COND 2 t.NewCondition 
        <TRIM_VAR_LIST <RENUM_EXPRESSION t.VarList t.Expr>>);
    };

RENUM_COND4 {
    t.VarList t.NewExpr e.SentenceList =
        (SY_COND 3 t.NewExpr 
        <RENUM_SENTENCE_LIST t.VarList e.SentenceList>);
    };

RENUM_CONDITION {
    t.VarList (SY_CONDITION t.Expr t.Pattern) =
        <RENUM_CONDITION2 <RENUM_EXPRESSION t.VarList t.Expr> t.Pattern>;
    };

RENUM_CONDITION2 {
    t.VarList t.NewExpr t.Pattern =
        <RENUM_CONDITION3 t.NewExpr <RENUM_PATTERN t.VarList t.Pattern>>;
    };

RENUM_CONDITION3 {
    t.NewExpr t.VarList t.NewPattern =
        t.VarList (SY_CONDITION t.NewExpr t.NewPattern);
    };

RENUM_EXPRESSION {
    t.VarList (e.1) = <RENUM_EXPRESSION2 (t.VarList) (e.1)>;
    };

RENUM_EXPRESSION2 {
    (e.1 t.VarList) () = t.VarList (e.1);

    (e.1 t.VarList) ((SY_TERM 3 e.Var) e.2) =
        <RENUM_EXPRESSION2 
            (e.1 <PROCESS_VAR (SY_TERM 3 e.Var) t.VarList>) (e.2)
        >;

    (e.1 t.VarList) ((SY_TERM 4 e.2) e.3) =
        <RENUM_EXPRESSION3 (e.1) (<RENUM_EXPRESSION2 (t.VarList) e.2>) (e.3)>;

    (e.1 t.VarList) ((SY_TERM 5 (e.4) e.2) e.3) =
        <RENUM_EXPRESSION4 (e.4) (e.1) (<RENUM_EXPRESSION2 (t.VarList) e.2>) (e.3)>;

    (e.1 t.VarList) (t.3 e.2) =
        <RENUM_EXPRESSION2 (e.1 t.3 t.VarList) (e.2)>;
    };

RENUM_EXPRESSION3 {
    (e.1) (t.VarList (e.2)) (e.3) =
        <RENUM_EXPRESSION2 (e.1 (SY_TERM 4 (e.2)) t.VarList) (e.3)>;
    };

RENUM_EXPRESSION4 {
    (e.4) (e.1) (t.VarList (e.2)) (e.3) =
        <RENUM_EXPRESSION2 (e.1 (SY_TERM 5 (e.4) (e.2)) t.VarList) (e.3)>;
    };


PROCESS_VAR {
    (s.Tag1 s.Tag2 e.Var) (e.Left ((e.Var)(e.NewVar)) e.Right) =
        (s.Tag1 s.Tag2 e.NewVar) (e.Left ((e.Var)(e.NewVar)) e.Right);

    (s.Tag1 s.Tag2 s.Type '.' e.Var) (s.Count e.1) =
        <PROCESS_VAR2
            (s.Tag1 s.Tag2 s.Type '.' e.Var) (s.Count e.1)
            s.Type '.' <Symb s.Count>
        >;
    };

PROCESS_VAR2 {
    (s.Tag1 s.Tag2 e.Var) (s.Count e.1) e.NewVar =
        (s.Tag1 s.Tag2 e.NewVar)
        (<Add (s.Count) 1> e.1 ((e.Var)(e.NewVar)));
    };

TRIM_VAR_LIST {
    t.VarList t.1 = t.1;
    };

******************************************************************************
* Генерация программы по дереву синтаксического разбора
******************************************************************************

/* Генератор программы из дерева */
RSB_GEN {
    e.1 = <Prout 'Program generation in progress ...'>
         <CALC_LEN <GEN_PROGRAM e.1>>
         <Prout '    done (current Step is 1).'>;
    };

/* Вычисляет длину каждой лексемы */
CALC_LEN {
    = ;
    (s.Tag e.1) e.2 = (s.Tag <CALC_LEN2 e.1 0>) <CALC_LEN e.2>;
    (e.1) e.2 = (<CALC_LEN e.1>) <CALC_LEN e.2>;
    };

CALC_LEN2 {
    s.CommonLen = s.CommonLen;
    (e.1) e.2 s.CommonLen = <CALC_LEN3 (<Lenw e.1>) e.2 s.CommonLen>;
    };

CALC_LEN3 {
    (s.Len e.1) e.2 s.CommonLen = 
        (e.1 s.Len) <CALC_LEN2 e.2 <Add (s.CommonLen) s.Len>>;
    };

/* 
 * program ::= 
 *     function-def 
 *     | function-def program
 *
 * Формат дерева: function-def ... function-def
 */
GEN_PROGRAM {
    = ;
    (e.1) e.2 = <GEN_FUNCTION_DEF e.1> <GEN_PROGRAM e.2>;
    };

/*
 * function-def ::= 
 *     [$ENTRY] ident { sentence-list } [;]
 *     | $EXTERNAL ident-clist ;
 *     | $EXTERN ident-clist ;
 *     | $EXTRN ident-clist ;
 *
 * Формат дерева: 
 *     (SY_FUNCTION_DEF 1 (ident) sentence-list)
 *         для функции без $ENTRY
 *     (SY_FUNCTION_DEF 2 (ident) sentence-list)
 *         для функции с $ENTRY
 *     (SY_FUNCTION_DEF 3 (ident)...(ident))
 *         для функций с $EXTRN, $EXTERN и $EXTERNAL
 */
GEN_FUNCTION_DEF {
    SY_FUNCTION_DEF 1 (e.Name) e.1 = <GEN_FUNCTION_DEF2 (e.Name) e.1>;
    SY_FUNCTION_DEF 2 (e.Name) e.1 = <GEN_FUNCTION_DEF2 ('$ENTRY ' e.Name) e.1>;
    SY_FUNCTION_DEF 3 e.1 = (LY_EXTERNAL ('$EXTERNAL ') <GEN_FUNCTION_DEF3 e.1>);
    };

GEN_FUNCTION_DEF2 {
    (e.Name) e.1 =
        (LY_FUNC_BEGIN (e.Name ' {')) 
        (<GEN_SENTENCE_LIST e.1>)
        (LY_FUNC_END ('    };'));
    };

GEN_FUNCTION_DEF3 {
    (e.1) = (e.1 ';');
    (e.1) e.2 = (e.1 ', ') <GEN_FUNCTION_DEF3 e.2>;
    };

/*
 * sentence-list ::=
 *     sentence [;]
 *     | sentence ; sentence-list
 *
 * Формат дерева: sentence...sentence
 */
GEN_SENTENCE_LIST {
    = ;
    (e.1) e.2 = <GEN_SENTENCE e.1> <GEN_SENTENCE_LIST e.2>;
    };

/*
 * sentence ::= 
 *     pattern , cond
 *     | pattern = expression
 *
 * Формат дерева:
 *     (SY_SENTENCE 1 pattern cond)
 *     (SY_SENTENCE 2 pattern expression)
 */
GEN_SENTENCE {
    SY_SENTENCE 1 (e.Pattern) (e.Cond) = 
        <GEN_PATTERN e.Pattern (', ') LY_SENTENCE_PATTERN> 
        <GEN_COND e.Cond>;

    SY_SENTENCE 2 (e.Pattern) (e.Expression) = 
        <GEN_PATTERN e.Pattern ('= ') LY_SENTENCE_PATTERN> 
        <GEN_EXPRESSION e.Expression (';') LY_SENTENCE_EXPRESSION>;
    };

/*
 * cond ::=
 *     condition , cond
 *     | condition = expression
 *     | expression : { sentence-list }
 *     | { cond-cond-replacement-list }
 *
 * Формат дерева:
 *     (SY_COND 1 condition cond)
 *     (SY_COND 2 condition expression)
 *     (SY_COND 3 expression sentence-list)
 *     (SY_COND 4 cond-cond-replacement-list)
 */
GEN_COND {
    SY_COND 1 (e.Condition) (e.Cond) =
        <GEN_CONDITION e.Condition (', ')> <GEN_COND e.Cond>;

    SY_COND 2 (e.Condition) (e.Expression) =
        <GEN_CONDITION e.Condition ('= ')> 
        <GEN_EXPRESSION e.Expression (';') LY_COND_EXPRESSION1>;

    SY_COND 3 (e.Expression) e.SentenceList =
        <GEN_EXPRESSION e.Expression (': ') LY_COND_EXPRESSION2>
        (LY_LIST_BEGIN ('{'))
        (<GEN_SENTENCE_LIST e.SentenceList>)
        (LY_LIST_END ('};'));

    SY_COND 4 e.CondCondReplacementList =
        (LY_LIST_BEGIN ('{'))
        (<GEN_COND_COND_REPLACEMENT_LIST e.CondCondReplacementList>)
        (LY_LIST_END ('};'));
    };

/*
 * condition ::= expression : pattern
 *
 * Формат дерева: (SY_CONDITION expression pattern)
 */
GEN_CONDITION {
    SY_CONDITION (e.Expression) (e.Pattern) (e.1) =
        <GEN_EXPRESSION e.Expression (': ') LY_CONDITION_EXPRESSION> 
        <GEN_PATTERN e.Pattern (e.1) LY_CONDITION_PATTERN>;
    };

/*
 * cond-cond-replacement-list ::=
 *     cond-cond-replacement [;]
 *     | cond-cond-replacement ; cond-cond-replacement-list
 *
 * Формат дерева: cond-cond-replacement...cond-cond-replacement
 */
GEN_COND_COND_REPLACEMENT_LIST {
    = ;

    (e.1) e.2 = 
        <GEN_COND_COND_REPLACEMENT e.1>
        <GEN_COND_COND_REPLACEMENT_LIST e.2>;
    };

/*
 * cond-cond-replacement ::= 
 *     condition , cond
 *     | condition = expression
 *
 * Формат дерева:
 *     (SY_COND_COND_REPLACEMENT 1 condition cond)
 *     (SY_COND_COND_REPLACEMENT 2 condition expression)
 */
GEN_COND_COND_REPLACEMENT {
    SY_COND_COND_REPLACEMENT 1 (e.Condition) (e.Cond) =
        <GEN_CONDITION e.Condition (', ')>
        <GEN_COND e.Cond>;

    SY_COND_COND_REPLACEMENT 2 (e.Condition) (e.Expression) =
        <GEN_CONDITION e.Condition ('= ')>
        <GEN_EXPRESSION e.Expression (';') LY_COND_EXPRESSION1>;
    };

/*
 * expression ::= 
 *     empty 
 *     | term expression
 *
 * Формат дерева:
 *     ()
 *     (term ... term)
 */
GEN_EXPRESSION {
    e.1 s.2 = (s.2 <GEN_EXPRESSION2 e.1>);
    };

GEN_EXPRESSION2 {
    (e.1) = (e.1);
    (e.1) (e.2) = <APPEND <GEN_TERM e.1> (e.2)>;
    (e.1) e.2 (e.3) = <GEN_TERM e.1> <GEN_EXPRESSION2 e.2 (e.3)>;
    };

/*
 * term ::= 
 *     Symbol 
 *     | string
 *     | variable 
 *     | (expression) 
 *     | <function-name expression>
 *
 * Формат дерева:
 *     (SY_TERM 1 Symbol)
 *     (SY_TERM 2 string)
 *     (SY_TERM 3 variable)
 *     (SY_TERM 4 expression)
 *     (SY_TERM 5 (function-name) expression)
 */
GEN_TERM {
    SY_TERM 5 (e.FuncName) () = ('<' e.FuncName '> ');

    SY_TERM 5 (e.FuncName) (e.Expr) = 
        ('<' e.FuncName ' ') <GEN_EXPRESSION2 e.Expr ()> ('> ');

    SY_TERM 4 (e.Expr) = ('(') <GEN_EXPRESSION2 e.Expr ()> (') ');
    SY_TERM 2 e.String = <GEN_STRING e.String>;
    SY_TERM s.1 e.2 = (e.2 ' ');
    };

/*
 * pattern ::=
 *     empty
 *     | pattern-term pattern
 *
 * Формат дерева:
 *     ()
 *     (pattern-term ... pattern-term)
 */
GEN_PATTERN {
    e.1 s.2 = (s.2 <GEN_PATTERN2 e.1>);
    };

GEN_PATTERN2 {
    (e.1) = (e.1);
    (e.1) (e.2) = <APPEND <GEN_PATTERN_TERM e.1> (e.2)>;
    (e.1) e.2 (e.3) = <GEN_PATTERN_TERM e.1> <GEN_PATTERN2 e.2 (e.3)>;
    };

/*
 * pattern-term ::= 
 *     Symbol 
 *     | string
 *     | variable 
 *     | (pattern) 
 *
 * Формат дерева:
 *     (SY_PATTERN_TERM 1 Symbol)
 *     (SY_PATTERN_TERM 2 string)
 *     (SY_PATTERN_TERM 3 variable)
 *     (SY_PATTERN_TERM 4 pattern)
 */
GEN_PATTERN_TERM {
    SY_PATTERN_TERM 4 (e.Pattern) = ('(') <GEN_PATTERN2 e.Pattern ()> (') ');
    SY_PATTERN_TERM 2 e.String = <GEN_STRING e.String>;
    SY_PATTERN_TERM s.1 e.2 = (e.2 ' ');
    };

/* Формирует строковую константу */
GEN_STRING {
    '\'' = ('''' ' ');
    '\'' e.1 = ('''' ' ') <GEN_STRING e.1>;
    e.1 = ('\'' <GEN_STRING2 e.1> "' ");
    };

GEN_STRING2 {
    e.1 '\'' e.2 = e.1 "''" <GEN_STRING2 e.2>;
    e.1 = e.1;
    };

/* Добавляет e.2 справа от e.1 в скобках */
APPEND {
    e.3 (e.1) (e.2) = e.3 (e.1 e.2);
    }

******************************************************************************
* Генерация разметки программы
******************************************************************************

/* Грамматика для разметки:

   program ::=
       function-def 
       | function-def program

   function-def ::=
       LY_EXTERNAL
       | LY_FUNC_BEGIN (sentence-list) LY_FUNC_END

   sentence-list ::=
       sentence
       | sentence sentence-list

   sentence ::=
       LY_SENTENCE_PATTERN cond
       | LY_SENTENCE_PATTERN LY_SENTENCE_EXPRESSION

   cond ::=
       condition cond
       | condition LY_COND_EXPRESSION1
       | LY_COND_EXPRESSION2 LY_LIST_BEGIN (sentence-list) LY_LIST_END
       | LY_LIST_BEGIN (cond-cond-replacement-list) LY_LIST_END

   condition ::= LY_CONDITION_EXPRESSION LY_CONDITION_PATTERN

   cond-cond-replacement-list ::=
       cond-cond-replacement
       | cond-cond-replacement cond-cond-replacement-list

   cond-cond-replacement ::= 
       condition , cond
       | condition = LY_COND_EXPRESSION
*/

/* Осуществляет разметку программы
 *
 * program ::=
 *     function-def 
 *     | function-def program
 *
 * function-def ::=
 *     LY_EXTERNAL
 *     | LY_FUNC_BEGIN sentence-list LY_FUNC_END
 */

RSB_LAYOUT {
    e.1 = <Prout 'Layout generation in progress ...'>
         <RSB_LAYOUT2 e.1>
         <Prout '    done (current Step is 1).'>;
    };

RSB_LAYOUT2 {
    = ;

    (LY_EXTERNAL e.1) e.2 = 
        <LAYOUT_EXTERNAL e.1> <RSB_LAYOUT2 e.2>;

    (LY_FUNC_BEGIN (e.1 s.7) s.5) (e.2) (LY_FUNC_END (e.3 s.8) s.6) e.4 =
        e.1 CAR_RET 
        <LAYOUT_SENTENCE_LIST e.2 4>
        e.3 CAR_RET CAR_RET
        <RSB_LAYOUT2 e.4>;
    };

LAYOUT_EXTERNAL {
    e.1 s.Len = <TRIM_LAYOUT_INFO <OUT_PIECE e.1 s.Len 0>> CAR_RET CAR_RET;
    };

/*
 * sentence-list ::=
 *     sentence
 *     | sentence sentence-list
 *
 * sentence ::=
 *     LY_SENTENCE_PATTERN cond
 *     | LY_SENTENCE_PATTERN LY_SENTENCE_EXPRESSION
 *
 */
LAYOUT_SENTENCE_LIST {
    s.Indent = ;

    (LY_SENTENCE_PATTERN e.1) (LY_SENTENCE_EXPRESSION e.2) e.3 s.Indent =
        <BLANK s.Indent> 
        <LAYOUT_SENTENCE_LIST2 (<OUT_PIECE e.1 s.Indent>) e.2 s.Indent> CAR_RET
        <LAYOUT_SENTENCE_LIST e.3 s.Indent>;

    (LY_SENTENCE_PATTERN e.1) e.2 s.Indent =
        <BLANK s.Indent> <TRIM_LAYOUT_INFO <OUT_PIECE e.1 s.Indent>> CAR_RET
        <LAYOUT_SENTENCE_LIST4 <LAYOUT_COND e.2 <Add (s.Indent) 4>> s.Indent>;
    };

LAYOUT_SENTENCE_LIST2 {
    (e.1 (s.2 1)) e.3 s.Indent = 
        e.1 CAR_RET <BLANK <Add (s.Indent) 4>> 
        <TRIM_LAYOUT_INFO <OUT_PIECE e.3 <Add (s.Indent) 4>>> CAR_RET;

    (e.1 (s.2 0)) e.3 s.Indent = 
        e.1 <LAYOUT_SENTENCE_LIST3 <OUT_PIECE e.3 s.2> (e.3) s.Indent> CAR_RET;
    };

LAYOUT_SENTENCE_LIST3 {
    e.1 (s.2 0) (e.3) s.Indent = e.1;

    e.1 (s.2 1) (e.3) s.Indent = 
        CAR_RET <BLANK <Add (s.Indent) 4>> 
        <TRIM_LAYOUT_INFO <OUT_PIECE e.3 <Add (s.Indent) 4>>>;
    };

LAYOUT_SENTENCE_LIST4 {
    (e.1) e.2 s.Indent = e.1 CAR_RET <LAYOUT_SENTENCE_LIST e.2 s.Indent>;
    };

/*
 * cond ::=
 *     condition cond
 *     | condition LY_COND_EXPRESSION1
 *     | LY_COND_EXPRESSION2 LY_LIST_BEGIN sentence-list LY_LIST_END
 *     | LY_LIST_BEGIN cond-cond-replacement-list LY_LIST_END
 *
 * condition ::= LY_CONDITION_EXPRESSION LY_CONDITION_PATTERN
 *
 * cond-cond-replacement-list ::=
 *     cond-cond-replacement
 *     | cond-cond-replacement cond-cond-replacement-list
 *
 * cond-cond-replacement ::= 
 *     condition , cond
 *     | condition = LY_COND_EXPRESSION
 */
LAYOUT_COND {
    e.1 s.Indent = <LAYOUT_COND2 () (e.1) s.Indent>;
    };

LAYOUT_COND2 {
    (e.1) 
    (
        (LY_CONDITION_EXPRESSION e.2) 
        (LY_CONDITION_PATTERN e.3)
        (LY_COND_EXPRESSION1 e.4)
        e.5
    ) 
    s.Indent =
        (
            e.1 
            <BLANK s.Indent> <LAYOUT_COND3 (e.2) e.3 s.Indent> CAR_RET
            <BLANK s.Indent> <TRIM_LAYOUT_INFO <OUT_PIECE e.4 s.Indent>> CAR_RET
        )
        e.5;

    (e.1) 
    (
        (LY_CONDITION_EXPRESSION e.2) 
        (LY_CONDITION_PATTERN e.3)
        e.5
    ) 
    s.Indent =
        <LAYOUT_COND2
            (
                e.1 
                <BLANK s.Indent> <LAYOUT_COND3 (e.2) e.3 s.Indent> CAR_RET
            )
            (e.5) 
            s.Indent
        >;

    (e.1)
    (
        (LY_COND_EXPRESSION2 e.2)
        (LY_LIST_BEGIN (e.3 s.4) s.5)
        (e.6)
        (LY_LIST_END (e.7 s.8) s.9)
        e.10
    )
    s.Indent =
        (
            e.1
            <BLANK s.Indent> <TRIM_LAYOUT_INFO <OUT_PIECE e.2 s.Indent>> CAR_RET
            <BLANK s.Indent> e.3 CAR_RET
            <LAYOUT_SENTENCE_LIST e.6 <Add (s.Indent) 4>>
            <BLANK s.Indent> e.7 CAR_RET
        )
        e.10;
    };

LAYOUT_COND3 {
    (e.1) e.2 s.Indent = <LAYOUT_COND4 (<OUT_PIECE e.1 s.Indent>) e.2 s.Indent>;
    };

LAYOUT_COND4 {
    (e.1 (s.2 1)) e.3 s.Indent = 
        e.1 CAR_RET <BLANK <Add (s.Indent) 4>> 
        <TRIM_LAYOUT_INFO <OUT_PIECE e.3 <Add (s.Indent) 4>>>;

    (e.1 (s.2 0)) e.3 s.Indent = 
        e.1 <LAYOUT_COND5 <OUT_PIECE e.3 s.2> (e.3) s.Indent>;
    };

LAYOUT_COND5 {
    e.1 (s.2 0) (e.3) s.Indent = e.1;

    e.1 (s.2 1) (e.3) s.Indent = 
        CAR_RET <BLANK <Add (s.Indent) 4>> 
        <TRIM_LAYOUT_INFO <OUT_PIECE e.3 <Add (s.Indent) 4>>>;
    };

OUT_PIECE {
    e.1 s.Len s.Indent = 
        <OUT_PIECE2 (e.1) (<Sub (80) <Add (s.Len) s.Indent>>) s.Len s.Indent>;
    };

OUT_PIECE2 {
    (e.1) (s.2) s.Len s.Indent = <OUT_SOLID e.1> (<Add (s.Len) s.Indent> 0);

    (e.1) ('-' s.2) s.Len s.Indent = <OUT_BROKEN e.1 s.Indent>;
    };

OUT_SOLID {
    = ;
    (e.1 s.2) e.3 = e.1 <OUT_SOLID e.3>;
    };

OUT_BROKEN {
    e.1 s.Indent = <OUT_BROKEN2 <COLLECT e.1 s.Indent>>;
    };

OUT_BROKEN2 {
    (e.1) () s.Right s.Indent = 
        <OUT_SOLID e.1> (s.Right 1);

    (e.1) (e.2) s.Right s.Indent = 
        <OUT_SOLID e.1> CAR_RET <BLANK s.Indent>
        <OUT_BROKEN (<BLANK 4> 4) e.2 s.Indent>;
    };

COLLECT {
    ('    ' 4) (e.1 s.2) e.3 s.Indent = 
        <COLLECT4 ('    ' 4) (e.1 s.2) e.3 s.Indent (<Sub (76) <Add (s.Indent) s.2>>)>;

    (e.1 s.2) e.3 s.Indent = 
        <COLLECT4 (e.1 s.2) e.3 s.Indent (<Sub (80) <Add (s.Indent) s.2>>)>;
    };

COLLECT4 {
    e.1 s.Indent (s.2) = <COLLECT2 () (e.1) s.Indent> s.Indent;

    ('    ' 4) (e.1 s.2) e.3 s.Indent ('-' s.4) = 
        (('    ' 4) (e.1 s.2)) (e.3) <Add (s.Indent) s.2> s.Indent;

    (e.1 s.2) e.3 s.Indent ('-' s.4) = 
        ((e.1 s.2)) (e.3) <Add (s.Indent) s.2> s.Indent;
    };

COLLECT2 {
    (e.1) () s.Indent = (e.1) () s.Indent;
    (e.1) ((e.2 s.3) e.4) s.Indent = 
        <COLLECT3 
            (e.1) ((e.2 s.3) e.4) 
            <Add (s.Indent) s.3>
            (<Sub (80) <Add (s.Indent) s.3>>)
        >;
    };

COLLECT3 {
    (e.1) ((e.2 s.3) e.4) s.NewIndent (s.5) =
        <COLLECT2 (e.1 (e.2 s.3)) (e.4) s.NewIndent>;

    (e.1) ((e.2 s.3) e.4) s.NewIndent ('-' s.5) =
        (e.1) ((e.2 s.3) e.4) s.NewIndent;
    };

TRIM_LAYOUT_INFO {
    e.1 (e.2) = e.1;
    };

/* Формирует строку из нужного числа пробелов */
BLANK {
    0 = ;
    s.1 = ' ' <BLANK <Sub (s.1) 1>>;
    };
